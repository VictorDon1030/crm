<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.wolfcode.crm.mapper.MemberMapper">
    <resultMap id="BaseResultMap" type="cn.wolfcode.crm.domain.Member">
        <id column="id" property="id"/>
        <result column="memberNum" property="memberNum"/>
        <result column="name" property="name"/>
        <result column="phone" property="phone"/>
        <result column="password" property="password"/>
        <result column="points" property="points"/>
        <result column="balance" property="balance"/>
        <result column="usefullife" property="usefullife"/>
        <result column="state" property="state"/>
        <result column="birthday" property="birthday"/>
        <association property="grade" javaType="DictionaryItem" columnPrefix="grade_">
            <id column="id" property="id"/>
            <result column="name" property="name"/>
        </association>
        <collection property="bonusPointRecord" column="id" ofType="bonusPointRecord" fetchType="eager"
                    select="cn.wolfcode.crm.mapper.BonusPointRecordMapper.selectRecordByMemberId"/>
    </resultMap>
    <delete id="deleteByPrimaryKey">
        DELETE FROM member
        WHERE id = #{id}
    </delete>
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO member (memberNum, name, phone, password, grade_id, payment_id,
                            points, balance, usefullife, onUser_id, state, birthday)
        VALUES (#{memberNum}, #{name}, #{phone}, #{password}, #{grade.id}, #{payment.id},
                              #{points}, #{balance}, #{usefullife}, #{onUser.id}, #{state}, #{birthday})
    </insert>
    <update id="updateByPrimaryKey">
        UPDATE member
        SET memberNum  = #{memberNum},
            name       = #{name},
            phone      = #{phone},
            password   = #{password},
            grade_id   = #{grade.id},
            payment_id = #{payment.id},
            birthday   = #{birthday},
            points     = #{points},
            balance    = #{balance},
            usefullife = #{usefullife},
            onUser_id  = #{onUser.id}
        WHERE id = #{id}
    </update>

    <!--设置会员是否挂失-->
    <update id="changeState">
        UPDATE member
        SET state = state ^ 1
        WHERE id = #{id}
    </update>
    <update id="changePoint">
        UPDATE member
        SET points = points + #{amount}
        WHERE id = #{id}
    </update>
    <update id="clearPoints">
        UPDATE member
        SET points = 0
        WHERE id = #{id}
    </update>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap">
        <include refid="base_column"/>
        <include refid="base_table"/>
        WHERE m.id = #{id}
    </select>
    <select id="selectAll" resultMap="BaseResultMap">
        <include refid="base_column"/>
        <include refid="base_table"/>
    </select>
    <select id="queryCount" resultType="int">
        SELECT count(id)
        FROM member
    </select>
    <select id="queryForList" resultMap="BaseResultMap">
        <include refid="base_column"/>
        <include refid="base_table"/>
        LIMIT #{start}, #{rows}
    </select>
    <select id="queryByKeyword" resultMap="BaseResultMap">
        <include refid="base_column"/>
        <include refid="base_table"/>
        <include refid="bonusPoint_where"/>
    </select>
    <select id="checkPass" resultType="member">
        SELECT
            id,
            memberNum,
            name,
            phone,
            password,
            grade_id,
            payment_id,
            points,
            balance,
            usefullife,
            onUser_id,
            state,
            birthday
        FROM member WHERE password = #{password} AND  id = #{id}
    </select>
    <select id="selectPoints" resultType="_int">
        SELECT points FROM member WHERE id = #{id}
    </select>

    <sql id="base_column">
        SELECT
            m.id,
            m.memberNum,
            m.name,
            m.phone,
            m.password,
            m.grade_id,
            m.payment_id,
            m.points,
            m.balance,
            m.birthday,
            m.usefullife,
            m.onUser_id,
            m.state,
            grade.id   grade_id,
            grade.name grade_name

    </sql>
    <sql id="base_table">
        FROM member m left join dictionaryitem grade on m.grade_id=grade.id
    </sql>
    <sql id="bonusPoint_where">
        <where>
            <if test="keyword != null">
                and (memberNum like CONCAT('%',#{keyword},'%') or phone like CONCAT('%',#{keyword},'%'))
            </if>
        </where>
    </sql>
</mapper>