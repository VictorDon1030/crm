<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.wolfcode.crm.mapper.MemberMapper">

    <resultMap id="BaseResultMap" type="cn.wolfcode.crm.domain.Member">

        <id column="id" property="id"/>
        <result column="memberNum" property="memberNum"/>
        <result column="name" property="name"/>
        <result column="phone" property="phone"/>
        <result column="password" property="password"/>
        <result column="points" property="points"/>
        <result column="consumePoints" property="consumePoints"/>
        <result column="balance" property="balance"/>
        <result column="usefullife" property="usefullife"/>
        <result column="state" property="state"/>
        <result column="birthday" property="birthday"/>
        <!--会员会员等级-->
        <association property="grade" javaType="DictionaryItem" columnPrefix="grade_">
            <id column="id" property="id"/>
            <result column="name" property="name"/>
        </association>
        <!--回显支付方式-->
        <association property="payment" javaType="DictionaryItem" columnPrefix="payment_">
            <id column="id" property="id"/>
            <result column="name" property="name"/>
        </association>
        <collection property="bonusPointRecord" column="id" ofType="bonusPointRecord" fetchType="eager"
                    select="cn.wolfcode.crm.mapper.BonusPointRecordMapper.selectRecordByMemberId"/>
    </resultMap>

    <delete id="deleteByPrimaryKey">
        DELETE FROM member
        WHERE id = #{id}
    </delete>
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO member (memberNum, name, phone, password, grade_id, payment_id, consumePoints,
                            points, balance, usefullife, onUser_id, state, birthday)
        VALUES (#{memberNum}, #{name}, #{phone}, #{password}, #{grade.id}, #{payment.id}, #{consumePoints},
                              #{points}, #{balance}, #{usefullife}, #{onUser.id}, #{state}, #{birthday})
    </insert>
    <update id="updateConsumePoints">
        UPDATE member SET consumePoints = consumePoints + #{ret} WHERE id = #{id}
    </update>
    <update id="updateByPrimaryKey">
        UPDATE member
        SET memberNum     = #{memberNum},
            name          = #{name},
            phone         = #{phone},
            grade_id      = #{grade.id},
            payment_id    = #{payment.id},
            birthday      = #{birthday},
            points        = #{points},
            balance       = #{balance},
            usefullife    = #{usefullife},
            consumePoints = #{consumePoints},
            onUser_id     = #{onUser.id}
        WHERE id = #{id}
    </update>

    <!--设置会员是否挂失-->
    <update id="changeState">
        UPDATE member
        SET state = state ^ 1
        WHERE id = #{id}
    </update>
    <!--修改密码的操作-->
    <update id="updatePasswordById">
        UPDATE member
        SET password = #{password}
        WHERE id = #{id}
    </update>

    <update id="changePoint">
        UPDATE member
        SET points = points + #{amount}
        WHERE id = #{id}
    </update>
    <update id="clearPoints">
        UPDATE member
        SET points = 0
        WHERE id = #{id}
    </update>
    <!--修改密码的操作-->


    <select id="selectByPrimaryKey" resultMap="BaseResultMap">
        <include refid="base_column"/>
        <include refid="base_table"/>
        WHERE m.id = #{id}
    </select>
    <select id="selectAll" resultMap="BaseResultMap">
        <include refid="base_column"/>
        <include refid="base_table"/>
    </select>
    <select id="queryCount" resultType="int">
        SELECT count(m.id)
        <include refid="base_table"/>
        <include refid="base_where"/>
    </select>
    <select id="queryForList" resultMap="BaseResultMap">
        <include refid="base_column"/>
        <include refid="base_table"/>
        <include refid="base_where"/>
        ORDER BY id DESC
        LIMIT #{start}, #{rows}
    </select>
    <select id="queryByKeyword" resultMap="BaseResultMap">
        <include refid="base_column"/>
        <include refid="base_table"/>
        <include refid="bonusPoint_where"/>
    </select>
    <!--//本日生日-->
    <select id="selectTodayBirthdayMember" resultType="map">
        select count(id) todayBirthday
        from member
        where month(birthday)=month(now()) and day(birthday) =day(now())
    </select>
    <!--本月生日-->
    <select id="selectMonthBirthdayMember" resultType="map">
        select count(id) monthBirthday
        from member
        where month(birthday)=month(now())
    </select>
    <!--总人数和余额-->
    <select id="selectSumMember" resultType="map">
        select sum(id) sumMember,
            sum(balance) sumbalance
        from member
    </select>
    <select id="checkPass" resultType="member">
        SELECT
            id,
            memberNum,
            name,
            phone,
            password,
            grade_id,
            payment_id,
            points,
            balance,
            usefullife,
            onUser_id,
            state,
            birthday,
            consumePoints
        FROM member
        WHERE password = #{password} AND id = #{id}
    </select>
    <select id="selectPoints" resultType="_int">
        SELECT points
        FROM member
        WHERE id = #{id}
    </select>

    <sql id="base_column">
        SELECT
            m.id,
            m.memberNum,
            m.name,
            m.phone,
            m.password,
            m.grade_id,
            m.payment_id,
            m.points,
            m.balance,
            m.birthday,
            m.usefullife,
            m.onUser_id,
            m.state,
            m.consumePoints,
            grade.id   grade_id,
            grade.name   grade_name,
            payment.id   payment_id,
            payment.name payment_name
    </sql>
    <sql id="base_table">
        FROM member m left join dictionaryitem grade on m.grade_id=grade.id
        left join dictionaryitem payment on m.payment_id=payment.id
    </sql>
    <sql id="bonusPoint_where">
        <where>
            <if test="keyword != null">
                and (memberNum like CONCAT('%',#{keyword},'%') or phone like CONCAT('%',#{keyword},'%'))
            </if>
        </where>
    </sql>

    <sql id="base_where">
        <where>
            <if test="keyword!= null">
                and ( m.memberNum like concat('%',#{keyword},'%') or m.name like concat('%',#{keyword},'%')
                or m.phone like concat('%', #{keyword},'%'))
            </if>
            <if test="gradeId >-1 and  gradeId != null">
                and m.grade_id= #{gradeId}
            </if>
            <if test="beginDate != null">
                and    m.usefullife &gt;= #{beginDate}
            </if>
            <if test="endDate != null">
                and   m.usefullife &lt;= #{endDate}
            </if>
            <if test="birthdayBeginDate != null">
                and  m.birthday &gt;= #{birthdayBeginDate}
            </if>
            <if test="birthdayEndDate != null">
                and   m.birthday &lt;= #{birthdayEndDate}
            </if>
        </where>
    </sql>
    <sql id="base_update">
        <trim prefix="set" suffixOverrides=",">
            <if test="password != null">
                password=#{password}
            </if>
        </trim>
    </sql>


    <!--beginDate;
    //结束时间
    private Date endDate;
    //生日开始时间
    private Date birthdayBeginDate;
    //生日结束时间
    private Date birthdayEndDate;-->
    <update id="updateBalance">
        update member set balance = #{balance} where id=#{mumberId}
    </update>

    <update id="updatePoints">
        update member set points = #{points} where id=#{mumberId}
    </update>
</mapper>